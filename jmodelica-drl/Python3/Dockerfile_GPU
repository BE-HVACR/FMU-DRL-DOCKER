# This is a CPU version jModelica-based DRL environment
FROM yangyangfu/jmodelica_py3
LABEL Yangyang Fu (yangyang.fu@tamu.edu)

# Install libgfortran for high-version pyfmi
#RUN apt-get update -q && \
#    apt-get install -q -y --no-install-recommends \
#    libgfortran4 \
#    && apt-get clean \
#    && rm -rf /var/lib/apt/lists/*

USER root

### ===============================================================================
## install pytorch gpu using cuda
## add cuda
## see;https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/10.1/ubuntu1804/devel/cudnn8/Dockerfile
ENV NVARCH x86_64

RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg2 curl ca-certificates && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/${NVARCH}/3bf863cc.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/${NVARCH} /" > /etc/apt/sources.list.d/cuda.list && \
    apt-get purge --autoremove -y curl \
    && rm -rf /var/lib/apt/lists/*

ENV CUDA_VERSION 10.1.243
ENV CUDA_PKG_VERSION $CUDA_VERSION-1

# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
# fetch updated key: see https://forums.developer.nvidia.com/t/18-04-cuda-docker-image-is-broken/212892
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-10-1=$CUDA_PKG_VERSION \
    cuda-compat-10-1 \
    && ln -s cuda-10.1 /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=10.1 brand=tesla,driver>=418,driver<419"

# CUDNN
ENV CUDNN_VERSION 8.0.5.39

RUN apt-get update && apt-get install -y --no-install-recommends \
    libcudnn8=$CUDNN_VERSION-1+cuda10.1 \
    libcudnn8-dev=$CUDNN_VERSION-1+cuda10.1 \
    && apt-mark hold libcudnn8 && \
    rm -rf /var/lib/apt/lists/*

# install pyhton opengl - not necessary if no render
#RUN apt-get update && \
#    apt-get install -y --no-install-recommends \
#    python-opengl 

# Install pytorch gpu version
RUN conda install pytorch torchvision torchaudio cudatoolkit=10.1 -c pytorch &&\
    conda clean -ya

### ====================================================================================
## install necessary python deep reinforcement learning package
# Downgrade setuptools for pytprch. This is a known bug which has been patched: https://github.com/pytorch/pytorch/pull/69904.
#  - tianshou: DRL library

RUN conda update conda && \
    conda config --add channels conda-forge && \
    conda install pip \
    tianshou=0.4.5 \
    matplotlib \
    setuptools=59.1.1 && \
    conda clean -ya

#### ==================================================================
#### install and test modelicagym
# install modelicagym from source to support FMU-based opengym environment
WORKDIR $HOME
RUN git config --global url."https://github.com/".insteadOf git://github.com/ && \
    pip install git+git://github.com/YangyangFu/modelicagym.git@master 

# install a modelica-opengym example: pole cart tutorial 
RUN mkdir github && cd github 
COPY ./gym-tutorial/gym_cart_jmodelica $HOME/github/Tutorials/gym_cart_jmodelica
COPY ./gym-tutorial/setup.py $HOME/github/Tutorials/setup.py
RUN ls ./github/Tutorials -l
RUN cd $HOME/github/Tutorials && pip install -e .
WORKDIR $HOME

# install pyhton opengl - not necessary if no render
#RUN apt-get update && \
#    apt-get install -y --no-install-recommends \
#    python-opengl && \
#    rm -rf /var/lib/apt/lists/*

# change user
USER developer
WORKDIR $HOME 

# Avoid warning that Matplotlib is building the font cache using fc-list. This may take a moment.
# This needs to be towards the end of the script as the command writes data to
# /home/developer/.cache
RUN python -c "import matplotlib.pyplot"